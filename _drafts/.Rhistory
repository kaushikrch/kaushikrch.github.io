library(haven)
raw <- read_sas("C:/Users/k.roy.chowdhury/Documents/Job_Files/Frito_Lays/Modeling_Phase/Modeling/Modeling_Datasets/Party_Size_Lays/Output/mix_l.sas7bdat")
str(raw)
View(raw)
raw <- read_sas("C:/Users/k.roy.chowdhury/Documents/Job_Files/Frito_Lays/Deck/ROI/Done/mix_join_total_effect_l_pslay.sas7bdat")
str(raw)
colnames(raw)
library(dplyr)
library(plyr)
library(plyr)
library(dplyr)
## Enter file names
file.name <- "mix_join_total_effect_l_LG.sas7bdat"
# file.name <- file_names[i]
mod.dat   <- "fin_mod_dat_5"
## Import sas files
library(haven)
file.ppg  <- read_sas(paste0("Done/", file.name))
model.dat <- read_sas(paste0("Done/", mod.dat, ".sas7bdat"))
## Find cannibalizing PPGs
col <- colnames(file.ppg)
library(stringr)
cann.ppg <- str_replace(col[grep("est_lg_Vol_", col)], "est_lg_Vol_", "")
#   cann.ppg <- paste0("p", cann.ppg)
#   model.dat <- model.dat %>%
#     mutate(PPG=paste0("p",PPG))
if(length(cann.ppg>0)){
## Filter the model data file to keep volume of relevant PPGs by date
model.dat <- model.dat %>%
group_by(PPG, RE_STO_NUM, Date) %>%
filter(PPG %in% cann.ppg) %>%
mutate(Vol_Promo = ifelse(PROMO_FLAG == 1, Volume, 0))
#       file.ppg <- rename(file.ppg, c("est_lg_Vol_23oz_Queso"="est_lg_Vol_p23oz_Queso"))
## Transpose model data file
library(reshape2)
model.dat <- dcast(model.dat, Date + RE_STO_NUM ~ PPG , value.var = "Vol_Promo")
model.dat[is.na(model.dat)] <- 0
## Join volume of cannibalizing PPGs from model data to mixed file
file.ppg <- left_join(file.ppg, model.dat, by = c("Date", "RE_STO_NUM"))
file.ppg[is.na(file.ppg)] <- 0
## Calculate drag factor on base volume
est <- as.list(paste0("est_lg_Vol_", cann.ppg))
cann.ppg <- as.list(cann.ppg)
drag_facts <- as.list(paste0("drag_", cann.ppg))
cols <- c(colnames(file.ppg), drag_facts)
selection <- list("Date", "RE_STO_NUM")
library(tidyr)
file.ppg.est <- file.ppg %>%
select_(.dots = c(est, selection)) %>%
do(., gather_(., "PPG_est", "Estimate", est)) %>%
mutate(PPG_est = str_replace(PPG_est, "est_lg_Vol_", ""))
file.ppg.vol <- file.ppg %>%
select_(.dots = c(cann.ppg, selection)) %>%
do(., gather_(., "PPG_est", "Volume", cann.ppg))
file.ppg.calc <- left_join(file.ppg.est, file.ppg.vol, by = c("Date", "RE_STO_NUM","PPG_est"))
rm(file.ppg.vol, file.ppg.est)
file.ppg.calc <- file.ppg.calc %>%
mutate(drag=ifelse(Volume == 0, 1, Volume^Estimate)) %>%
do(., dcast(., Date + RE_STO_NUM ~ PPG_est, value.var = "drag"))
renamed <- colnames(file.ppg.calc)
renamed[sapply(cann.ppg, function(x) grep(x, renamed))] <- paste0("drag_", renamed[sapply(cann.ppg, function(x) grep(x, renamed))])
file.ppg.calc <- file.ppg.calc %>%
setNames(renamed) %>%
mutate_(tot_drag = paste(renamed[sapply(cann.ppg, function(x) grep(x, renamed))], collapse = "*"))
file.ppg <- left_join(file.ppg, file.ppg.calc, by = c("Date", "RE_STO_NUM"))
}
attr(file.ppg$Pred, 'label') = NULL
file.ppg <- file.ppg %>%
mutate(optim_coeff = New_Predicted/Predicted_from_Mixed,
optim_base = Base_Volume * optim_coeff,
new_base_adj = ifelse(PROMO_FLAG == 1 & ("tot_drag" %in% colnames(file.ppg)), optim_base*tot_drag, optim_base),
new_pred_adj = ifelse(PROMO_FLAG == 1 & ("tot_drag" %in% colnames(file.ppg)), new_base_adj*Cann_Volume*Promo_Volume, New_Predicted)) %>%
filter(Date >= as.Date("05-Feb-2014", "%d-%b-%Y")) %>%
mutate(selling_price = DOLLARS/UNITS)
scalar <- read.csv("files/scalar.csv")
curve <- read.csv("files/investment_curve.csv")
pa <- read.csv("files/PA.csv")
cost <- read.csv("files/Cost.csv")
file.ppg <- file.ppg %>%
left_join(scalar, by = "PPG") %>%
left_join(curve, by = "PPG") %>%
left_join(pa, by = "PPG") %>%
left_join(cost, by = "PPG")
file.ppg <- file.ppg %>%
mutate(Promoted_Cost = Intercept_curve * exp(selling_price*Coeff_curve),
New_Baseline = new_base_adj*PPG.Average.Scalar,
Incremental_units = new_pred_adj*PPG.Average.Scalar-New_Baseline,
Investment_Adjustment = ifelse(Discount < 5, 0, New_Baseline*PA),
Promo_investment_2 = ifelse(Discount<5 & (PROMO_FLAG>0), (new_pred_adj-new_base_adj)*PPG.Average.Scalar*PA, 0),
Promo_investment_1 = ifelse(Discount >= 5,(List_Price-Promoted_Cost)*new_pred_adj*PPG.Average.Scalar,0),
Promo_investment = Promo_investment_1 - Investment_Adjustment+Promo_investment_2,
Investment_Adjustment_old = ifelse(Discount < 5, 0, (optim_base)*PPG.Average.Scalar*PA),
Promo_investment_old_2 = ifelse(Discount<5 & (PROMO_FLAG>0), (New_Predicted-optim_base)*PPG.Average.Scalar*PA, 0),
Promo_investment_old = ifelse(Discount >= 5, (List_Price-Promoted_Cost)*New_Predicted*PPG.Average.Scalar, 0),
Promo_investment_old=Promo_investment_old-Investment_Adjustment_old+Promo_investment_old_2,
Loss_in_inv = Promo_investment_old-Promo_investment,
abs_old = abs(New_Predicted-Volume),
abs_new = abs(new_pred_adj-Volume)
)
if(length(cann.ppg)>0){
Loss_in_inv <- list("Loss_in_inv")
selection <- list("Date", "RE_STO_NUM")
loss.file <- file.ppg %>%
select_(.dots = c(cann.ppg, selection, Loss_in_inv)) %>%
do(., melt(.,id=c(selection,Loss_in_inv)))  %>%
ungroup() %>%
group_by(Date, RE_STO_NUM) %>%
mutate(pct=1,
lost_inv = Loss_in_inv*pct) %>%
do(.,dcast(., Date+RE_STO_NUM~variable, value.var = "lost_inv"))
renamed <- colnames(loss.file)
renamed[sapply(cann.ppg, function(x) grep(x, renamed))] <- paste0("lost_", renamed[sapply(cann.ppg, function(x) grep(x, renamed))])
loss.file <- loss.file %>%
setNames(renamed)
file.ppg <- left_join(file.ppg, loss.file, by = c("Date", "RE_STO_NUM"))
}
file.ppg[is.na(file.ppg)] <- 0
abs <- list("abs_old", "abs_new")
selt <- list("PPG", "Promo_investment_old", "Promo_investment", "Volume")
if(exists("renamed")){
loss <- as.list(renamed[sapply(cann.ppg, function(x) grep(x, renamed))])
ff <- c(loss, selt, abs)
} else ff <- c(selt, abs)
file.smry <- file.ppg %>%
select_(.dots = ff) %>%
ungroup() %>%
group_by(PPG) %>%
summarise_each(funs(sum))
getwd(0)
getwd()
?factanal
??fa.promax
?princomp
library(dplyr)
summarise(mtcars, mean(mpg))
summarise_(mtcars, ~mean(mpg))
summarise_(mtcars, quote(mean(mpg)))
summarise_(mtcars, "mean(mpg)")
constant1 <- function(n) ~n
constant1(5)
summarise_(mtcars, constant1(5))
library(lazyeval)
interp(~ x + y, x = 10)
?interp
interp(lazy(x + y), x = 10)
interp(quote(x + y), x = 10)
interp("x + y", x = 10)
interp(~ mean(var), var = as.name("mpg"))
interp(~ mean(var), var = quote(mpg))
interp(~ mean(var), var = c("mpg"))
interp(~ mean(var), var = c("mpg", "oi\"))
interp(~ mean(var), var = c("mpg", "oi"))
interp(~ f(a, b), f = as.name("+"))
interp(~ x + y, .values = list(x = 10, y = 100, z = 122))
eval(interp(~ x + y, .values = list(x = 10, y = 100, z = 122)))
lazy_(quote(a + x), globalenv())
f <- function(x = b - a) {
lazy(x)
}
f(0)
f()
f(909)
f(a + b / c)
vignette("chained-promises")
df <- data.frame(x = rnorm(10), y=rnorm(10))
# define arbitrary function
test <- function(x) x^2
# use standard evaluation with dplyr
df %>% mutate_("mean(x)")
df %>% mutate_("test(x)")
df <- data.frame(x = rnorm(10), y=rnorm(10))
# define arbitrary function
test <- function(x) x^2
# use standard evaluation with dplyr
df %>% mutate_("mean(x)", "mean(y")
df %>% mutate_("test(x)")
df <- data.frame(x = rnorm(10), y=rnorm(10))
# define arbitrary function
test <- function(x) x^2
# use standard evaluation with dplyr
df %>% mutate_("mean(x, y)")
df <- data.frame(x = rnorm(10), y=rnorm(10))
# define arbitrary function
test <- function(x) x^2
# use standard evaluation with dplyr
df %>% mutate_(list("mean(x)", "mean(y"))
df <- data.frame(x = rnorm(10), y=rnorm(10))
# define arbitrary function
test <- function(x) x^2
# use standard evaluation with dplyr
df %>% mutate_(list("mean(x)", "mean(y)"))
df <- data.frame(x = rnorm(10), y=rnorm(10))
# define arbitrary function
test <- function(x) x^2
# use standard evaluation with dplyr
df %>% mutate_(.dots = list("mean(x)", "mean(y)"))
df %>% mutate_(~test(x))
keep_min_n_by_species <- function(expr, n) {
mc <- match.call()
}
keep_min_n_by_species(Petal.Width, 2)
keep_min_n_by_species <- function(expr, n) {
mc <- match.call()
return(mc)
}
keep_min_n_by_species(Petal.Width, 2)
keep_min_n_by_species <- function(expr, n) {
return(match.call())}
keep_min_n_by_species(Petal.Width, 2)
keep_min_n_by_species <- function(expr, n) {
return(match.call())}
keep_min_n_by_species <- function(expr, n) {
mc <- match.call()
mc$n}
keep_min_n_by_species(Petal.Width, 2)
keep_min_n_by_species <- function(expr, n) {
mc <- match.call()
mc$expr}
keep_min_n_by_species(Petal.Width, 2)
data(nycflights)
library(nycflights)
install.packages("nycflights")
install.packages("nycflights13")
library(nycflights13)
write.csv(airlines, "airlines.csv")
write.csv(flights, "flights.csv")
library(data.table)
install.packages("data.table")
install.packages("rbennchmark")
install.packages("rbenchmark")
library(rbenchmark)
read.readr <- function(x){
read_csv("flights.csv")
}
read.readr
read.readr()
library(data.table); library(readr)
?read.csv
library(rbenchmark)
library(data.table); library(readr)
## Read using read.csv() function from base
read.base <- function(x){
read.csv("flights.csv")
}
## Read using read_csv() function from readr
read.readr <- function(x){
read_csv("flights.csv")
}
## Read using fread() function from data.table
read.DT <- function(x){
read_csv("flights.csv")
}
read.base2 <- function(x){
read.csv("flights.csv", colClasses = "character")
}
benchmark(
read.base(),
read.base2(),
read.readr(),
read.DT(),
replications = 10
)
source('~/kaushikrch.github.io/_drafts/r2jekyll.R', echo=TRUE)
library(knitr)
setwd("~/kaushikrch.github.io/_drafts/")
# Get the filename given as an argument in the shell.
args = "benchmarking-file-imports.Rmd"
filename = args[1]
# Check that it's a .Rmd file.
if(!grepl(".Rmd", filename)) {
stop("You must specify a .Rmd file.")
}
# Knit and place in _posts.
dir = paste0("../_posts/", Sys.Date(), "-")
output = paste0(dir, sub('.Rmd', '.md', filename))
knit(filename, output)
# Copy .png files to the images directory.
fromdir = "{{ site.url }}/images"
todir = "../images"
pics = list.files(fromdir, ".png")
pics = sapply(pics, function(x) paste(fromdir, x, sep="/"))
file.copy(pics, todir)
unlink("{{ site.url }}", recursive=T)
